//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceCrSeed
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://DefaultNamespace", ConfigurationName="ServiceCrSeed.CrSeed")]
    public interface CrSeed
    {

        [System.ServiceModel.OperationContractAttribute(Action = "", ReplyAction = "*")]
        // [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name = "getVersionMayorReturn")]
        System.Threading.Tasks.Task<string> getVersionMayorAsync();

        [System.ServiceModel.OperationContractAttribute(Action = "", ReplyAction = "*")]
        // [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name = "getVersionMenorReturn")]
        System.Threading.Tasks.Task<string> getVersionMenorAsync();

        [System.ServiceModel.OperationContractAttribute(Action = "", ReplyAction = "*")]
        // [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name = "getVersionPatchReturn")]
        System.Threading.Tasks.Task<string> getVersionPatchAsync();

        [System.ServiceModel.OperationContractAttribute(Action = "", ReplyAction = "*")]
        // [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name = "getSeedReturn")]
        System.Threading.Tasks.Task<string> getSeedAsync();

        [System.ServiceModel.OperationContractAttribute(Action = "", ReplyAction = "*")]
        // [System.ServiceModel.XmlSerializerFormatAttribute(Style=System.ServiceModel.OperationFormatStyle.Rpc, SupportFaults=true, Use=System.ServiceModel.OperationFormatUse.Encoded)]
        [return: System.ServiceModel.MessageParameterAttribute(Name = "getStateReturn")]
        System.Threading.Tasks.Task<string> getStateAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public interface CrSeedChannel : ServiceCrSeed.CrSeed, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public partial class CrSeedClient : System.ServiceModel.ClientBase<ServiceCrSeed.CrSeed>, ServiceCrSeed.CrSeed
    {
        
        /// <summary>
        /// Implemente este método parcial para configurar el punto de conexión de servicio.
        /// </summary>
        /// <param name="serviceEndpoint">El punto de conexión para configurar</param>
        /// <param name="clientCredentials">Credenciales de cliente</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public CrSeedClient() : 
                base(CrSeedClient.GetDefaultBinding(), CrSeedClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.CrSeed.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CrSeedClient(EndpointConfiguration endpointConfiguration) : 
                base(CrSeedClient.GetBindingForEndpoint(endpointConfiguration), CrSeedClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CrSeedClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(CrSeedClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CrSeedClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(CrSeedClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CrSeedClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<string> getSeedAsync()
        {
            return base.Channel.getSeedAsync();
        }
        
        public System.Threading.Tasks.Task<string> getStateAsync()
        {
            return base.Channel.getStateAsync();
        }
        
        public System.Threading.Tasks.Task<string> getVersionMayorAsync()
        {
            return base.Channel.getVersionMayorAsync();
        }
        
        public System.Threading.Tasks.Task<string> getVersionMenorAsync()
        {
            return base.Channel.getVersionMenorAsync();
        }
        
        public System.Threading.Tasks.Task<string> getVersionPatchAsync()
        {
            return base.Channel.getVersionPatchAsync();
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.CrSeed))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                result.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.Transport;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("No se pudo encontrar un punto de conexión con el nombre \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.CrSeed))
            {
                return new System.ServiceModel.EndpointAddress("https://palena.sii.cl/DTEWS/CrSeed.jws");
            }
            throw new System.InvalidOperationException(string.Format("No se pudo encontrar un punto de conexión con el nombre \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return CrSeedClient.GetBindingForEndpoint(EndpointConfiguration.CrSeed);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return CrSeedClient.GetEndpointAddress(EndpointConfiguration.CrSeed);
        }
        
        public enum EndpointConfiguration
        {
            
            CrSeed,
        }
    }
}
